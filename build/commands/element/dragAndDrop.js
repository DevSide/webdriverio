"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dragAndDrop;

require("source-map-support/register");

var _utils = require("../../utils");

/**
 *
 * Drag an item to a destination element.
 *
 * @alias element.dragAndDrop
 * @param {Element} target    destination selector
 * @param {Number=}  duration  how long the drag should take place
 * @uses action/moveToObject, protocol/buttonDown, protocol/buttonUp, property/getLocation, protocol/touchDown, protocol/touchMove, protocol/touchUp
 * @type action
 *
 */
const ACTION_BUTTON = 0;

async function dragAndDrop(target, duration = 100) {
  if (!target || target.constructor.name !== 'Element') {
    throw new Error('command dragAndDrop requires an WebdriverIO Element as first parameter');
  }

  if (!this.isW3C) {
    await this.moveTo();
    await this.buttonDown(ACTION_BUTTON);
    await target.moveTo();
    return this.buttonUp(ACTION_BUTTON);
  }
  /**
   * get coordinates to drag and drop
   */


  const sourceRect = await (0, _utils.getElementRect)(this);
  const targetRect = await (0, _utils.getElementRect)(target);
  const sourceX = parseInt(sourceRect.x + sourceRect.width / 2, 10);
  const sourceY = parseInt(sourceRect.y + sourceRect.height / 2, 10);
  const targetX = parseInt(targetRect.x + targetRect.width / 2, 10) - sourceX;
  const targetY = parseInt(targetRect.y + targetRect.height / 2, 10) - sourceY;
  /**
   * W3C way of handle the drag and drop action
   */

  return this.performActions([{
    type: 'pointer',
    id: 'finger1',
    parameters: {
      pointerType: 'mouse'
    },
    actions: [{
      type: 'pointerMove',
      duration: 0,
      x: sourceX,
      y: sourceY
    }, {
      type: 'pointerDown',
      button: ACTION_BUTTON
    }, {
      type: 'pause',
      duration: 10
    }, // emulate human pause
    {
      type: 'pointerMove',
      duration,
      origin: 'pointer',
      x: targetX,
      y: targetY
    }, {
      type: 'pointerUp',
      button: ACTION_BUTTON
    }]
  }]).then(() => this.releaseActions());
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9lbGVtZW50L2RyYWdBbmREcm9wLmpzIl0sIm5hbWVzIjpbIkFDVElPTl9CVVRUT04iLCJkcmFnQW5kRHJvcCIsInRhcmdldCIsImR1cmF0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiRXJyb3IiLCJpc1czQyIsIm1vdmVUbyIsImJ1dHRvbkRvd24iLCJidXR0b25VcCIsInNvdXJjZVJlY3QiLCJ0YXJnZXRSZWN0Iiwic291cmNlWCIsInBhcnNlSW50IiwieCIsIndpZHRoIiwic291cmNlWSIsInkiLCJoZWlnaHQiLCJ0YXJnZXRYIiwidGFyZ2V0WSIsInBlcmZvcm1BY3Rpb25zIiwidHlwZSIsImlkIiwicGFyYW1ldGVycyIsInBvaW50ZXJUeXBlIiwiYWN0aW9ucyIsImJ1dHRvbiIsIm9yaWdpbiIsInRoZW4iLCJyZWxlYXNlQWN0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBWUE7O0FBWkE7Ozs7Ozs7Ozs7O0FBY0EsTUFBTUEsYUFBYSxHQUFHLENBQXRCOztBQUVlLGVBQWVDLFdBQWYsQ0FBNEJDLE1BQTVCLEVBQW9DQyxRQUFRLEdBQUcsR0FBL0MsRUFBb0Q7QUFDL0QsTUFBSSxDQUFDRCxNQUFELElBQVdBLE1BQU0sQ0FBQ0UsV0FBUCxDQUFtQkMsSUFBbkIsS0FBNEIsU0FBM0MsRUFBc0Q7QUFDbEQsVUFBTSxJQUFJQyxLQUFKLENBQVUsd0VBQVYsQ0FBTjtBQUNIOztBQUVELE1BQUksQ0FBQyxLQUFLQyxLQUFWLEVBQWlCO0FBQ2IsVUFBTSxLQUFLQyxNQUFMLEVBQU47QUFDQSxVQUFNLEtBQUtDLFVBQUwsQ0FBZ0JULGFBQWhCLENBQU47QUFDQSxVQUFNRSxNQUFNLENBQUNNLE1BQVAsRUFBTjtBQUNBLFdBQU8sS0FBS0UsUUFBTCxDQUFjVixhQUFkLENBQVA7QUFDSDtBQUVEOzs7OztBQUdBLFFBQU1XLFVBQVUsR0FBRyxNQUFNLDJCQUFlLElBQWYsQ0FBekI7QUFDQSxRQUFNQyxVQUFVLEdBQUcsTUFBTSwyQkFBZVYsTUFBZixDQUF6QjtBQUNBLFFBQU1XLE9BQU8sR0FBR0MsUUFBUSxDQUFDSCxVQUFVLENBQUNJLENBQVgsR0FBZ0JKLFVBQVUsQ0FBQ0ssS0FBWCxHQUFtQixDQUFwQyxFQUF3QyxFQUF4QyxDQUF4QjtBQUNBLFFBQU1DLE9BQU8sR0FBR0gsUUFBUSxDQUFDSCxVQUFVLENBQUNPLENBQVgsR0FBZ0JQLFVBQVUsQ0FBQ1EsTUFBWCxHQUFvQixDQUFyQyxFQUF5QyxFQUF6QyxDQUF4QjtBQUNBLFFBQU1DLE9BQU8sR0FBR04sUUFBUSxDQUFDRixVQUFVLENBQUNHLENBQVgsR0FBZ0JILFVBQVUsQ0FBQ0ksS0FBWCxHQUFtQixDQUFwQyxFQUF3QyxFQUF4QyxDQUFSLEdBQXNESCxPQUF0RTtBQUNBLFFBQU1RLE9BQU8sR0FBR1AsUUFBUSxDQUFDRixVQUFVLENBQUNNLENBQVgsR0FBZ0JOLFVBQVUsQ0FBQ08sTUFBWCxHQUFvQixDQUFyQyxFQUF5QyxFQUF6QyxDQUFSLEdBQXVERixPQUF2RTtBQUVBOzs7O0FBR0EsU0FBTyxLQUFLSyxjQUFMLENBQW9CLENBQUM7QUFDeEJDLElBQUFBLElBQUksRUFBRSxTQURrQjtBQUV4QkMsSUFBQUEsRUFBRSxFQUFFLFNBRm9CO0FBR3hCQyxJQUFBQSxVQUFVLEVBQUU7QUFBRUMsTUFBQUEsV0FBVyxFQUFFO0FBQWYsS0FIWTtBQUl4QkMsSUFBQUEsT0FBTyxFQUFFLENBQ0w7QUFBRUosTUFBQUEsSUFBSSxFQUFFLGFBQVI7QUFBdUJwQixNQUFBQSxRQUFRLEVBQUUsQ0FBakM7QUFBb0NZLE1BQUFBLENBQUMsRUFBRUYsT0FBdkM7QUFBZ0RLLE1BQUFBLENBQUMsRUFBRUQ7QUFBbkQsS0FESyxFQUVMO0FBQUVNLE1BQUFBLElBQUksRUFBRSxhQUFSO0FBQXVCSyxNQUFBQSxNQUFNLEVBQUU1QjtBQUEvQixLQUZLLEVBR0w7QUFBRXVCLE1BQUFBLElBQUksRUFBRSxPQUFSO0FBQWlCcEIsTUFBQUEsUUFBUSxFQUFFO0FBQTNCLEtBSEssRUFHNEI7QUFDakM7QUFBRW9CLE1BQUFBLElBQUksRUFBRSxhQUFSO0FBQXVCcEIsTUFBQUEsUUFBdkI7QUFBaUMwQixNQUFBQSxNQUFNLEVBQUUsU0FBekM7QUFBb0RkLE1BQUFBLENBQUMsRUFBRUssT0FBdkQ7QUFBZ0VGLE1BQUFBLENBQUMsRUFBRUc7QUFBbkUsS0FKSyxFQUtMO0FBQUVFLE1BQUFBLElBQUksRUFBRSxXQUFSO0FBQXFCSyxNQUFBQSxNQUFNLEVBQUU1QjtBQUE3QixLQUxLO0FBSmUsR0FBRCxDQUFwQixFQVdIOEIsSUFYRyxDQVdFLE1BQU0sS0FBS0MsY0FBTCxFQVhSLENBQVA7QUFZSCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIERyYWcgYW4gaXRlbSB0byBhIGRlc3RpbmF0aW9uIGVsZW1lbnQuXG4gKlxuICogQGFsaWFzIGVsZW1lbnQuZHJhZ0FuZERyb3BcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0ICAgIGRlc3RpbmF0aW9uIHNlbGVjdG9yXG4gKiBAcGFyYW0ge051bWJlcj19ICBkdXJhdGlvbiAgaG93IGxvbmcgdGhlIGRyYWcgc2hvdWxkIHRha2UgcGxhY2VcbiAqIEB1c2VzIGFjdGlvbi9tb3ZlVG9PYmplY3QsIHByb3RvY29sL2J1dHRvbkRvd24sIHByb3RvY29sL2J1dHRvblVwLCBwcm9wZXJ0eS9nZXRMb2NhdGlvbiwgcHJvdG9jb2wvdG91Y2hEb3duLCBwcm90b2NvbC90b3VjaE1vdmUsIHByb3RvY29sL3RvdWNoVXBcbiAqIEB0eXBlIGFjdGlvblxuICpcbiAqL1xuXG5pbXBvcnQgeyBnZXRFbGVtZW50UmVjdCB9IGZyb20gJy4uLy4uL3V0aWxzJ1xuXG5jb25zdCBBQ1RJT05fQlVUVE9OID0gMFxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBkcmFnQW5kRHJvcCAodGFyZ2V0LCBkdXJhdGlvbiA9IDEwMCkge1xuICAgIGlmICghdGFyZ2V0IHx8IHRhcmdldC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnRWxlbWVudCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb21tYW5kIGRyYWdBbmREcm9wIHJlcXVpcmVzIGFuIFdlYmRyaXZlcklPIEVsZW1lbnQgYXMgZmlyc3QgcGFyYW1ldGVyJylcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNXM0MpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5tb3ZlVG8oKVxuICAgICAgICBhd2FpdCB0aGlzLmJ1dHRvbkRvd24oQUNUSU9OX0JVVFRPTilcbiAgICAgICAgYXdhaXQgdGFyZ2V0Lm1vdmVUbygpXG4gICAgICAgIHJldHVybiB0aGlzLmJ1dHRvblVwKEFDVElPTl9CVVRUT04pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGNvb3JkaW5hdGVzIHRvIGRyYWcgYW5kIGRyb3BcbiAgICAgKi9cbiAgICBjb25zdCBzb3VyY2VSZWN0ID0gYXdhaXQgZ2V0RWxlbWVudFJlY3QodGhpcylcbiAgICBjb25zdCB0YXJnZXRSZWN0ID0gYXdhaXQgZ2V0RWxlbWVudFJlY3QodGFyZ2V0KVxuICAgIGNvbnN0IHNvdXJjZVggPSBwYXJzZUludChzb3VyY2VSZWN0LnggKyAoc291cmNlUmVjdC53aWR0aCAvIDIpLCAxMClcbiAgICBjb25zdCBzb3VyY2VZID0gcGFyc2VJbnQoc291cmNlUmVjdC55ICsgKHNvdXJjZVJlY3QuaGVpZ2h0IC8gMiksIDEwKVxuICAgIGNvbnN0IHRhcmdldFggPSBwYXJzZUludCh0YXJnZXRSZWN0LnggKyAodGFyZ2V0UmVjdC53aWR0aCAvIDIpLCAxMCkgLSBzb3VyY2VYXG4gICAgY29uc3QgdGFyZ2V0WSA9IHBhcnNlSW50KHRhcmdldFJlY3QueSArICh0YXJnZXRSZWN0LmhlaWdodCAvIDIpLCAxMCkgLSBzb3VyY2VZXG5cbiAgICAvKipcbiAgICAgKiBXM0Mgd2F5IG9mIGhhbmRsZSB0aGUgZHJhZyBhbmQgZHJvcCBhY3Rpb25cbiAgICAgKi9cbiAgICByZXR1cm4gdGhpcy5wZXJmb3JtQWN0aW9ucyhbe1xuICAgICAgICB0eXBlOiAncG9pbnRlcicsXG4gICAgICAgIGlkOiAnZmluZ2VyMScsXG4gICAgICAgIHBhcmFtZXRlcnM6IHsgcG9pbnRlclR5cGU6ICdtb3VzZScgfSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAgeyB0eXBlOiAncG9pbnRlck1vdmUnLCBkdXJhdGlvbjogMCwgeDogc291cmNlWCwgeTogc291cmNlWSB9LFxuICAgICAgICAgICAgeyB0eXBlOiAncG9pbnRlckRvd24nLCBidXR0b246IEFDVElPTl9CVVRUT04gfSxcbiAgICAgICAgICAgIHsgdHlwZTogJ3BhdXNlJywgZHVyYXRpb246IDEwIH0sIC8vIGVtdWxhdGUgaHVtYW4gcGF1c2VcbiAgICAgICAgICAgIHsgdHlwZTogJ3BvaW50ZXJNb3ZlJywgZHVyYXRpb24sIG9yaWdpbjogJ3BvaW50ZXInLCB4OiB0YXJnZXRYLCB5OiB0YXJnZXRZIH0sXG4gICAgICAgICAgICB7IHR5cGU6ICdwb2ludGVyVXAnLCBidXR0b246IEFDVElPTl9CVVRUT04gfVxuICAgICAgICBdXG4gICAgfV0pLnRoZW4oKCkgPT4gdGhpcy5yZWxlYXNlQWN0aW9ucygpKVxufVxuIl19